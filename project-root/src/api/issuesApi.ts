import { Issue } from "../types/issue";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–æ—Å–∫–∏
export const fetchIssuesByBoardId = async (boardId: string): Promise<Issue[]> => {
  const res = await fetch(`http://localhost:8080/api/v1/boards/${boardId}/tasks`);
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á");

  const json = await res.json();
  return json;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ ID
export const fetchTaskById = async (taskId: string): Promise<Issue> => {
  const response = await fetch(`http://localhost:8080/api/v1/tasks/${taskId}`);
  if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏");

  return await response.json();
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
export const createIssue = async (
  boardId: number,
  data: { title: string; description: string; priority: string; assigneeId: number }
) => {
  const response = await fetch(`http://localhost:8080/api/v1/tasks/create`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      ...data,
      boardId,
    }),
  });

  if (!response.ok) {
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
  }

  return await response.json();
};

export const updateTask = async (
  taskId: number,
  data: {
    title: string;
    description: string;
    status: string;
    priority: string;
    assigneeId: number; // ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω–æ
  }
) => {
  const response = await fetch(`http://localhost:8080/api/v1/tasks/update/${taskId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });

  if (!response.ok) {
    const errorText = await response.text(); // –ª–æ–≥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", errorText);
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
  }

  return await response.json();
};


export const fetchTasksByUserId = async (userId: string) => {
  const res = await fetch(`http://localhost:8080/api/v1/users/${userId}/tasks`);
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  return res.json();
};

export const fetchAllTasks = async (): Promise<Issue[]> => {
  const res = await fetch("http://localhost:8080/api/v1/tasks");
  if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á");

  const json = await res.json();
  return json.data; // üëà –∑–¥–µ—Å—å –±–µ—Ä—ë–º –∏–º–µ–Ω–Ω–æ –º–∞—Å—Å–∏–≤ –∏–∑ –ø–æ–ª—è "data"
};

export const deleteTask = async (taskId: number) => {
  const res = await fetch(`http://localhost:8080/api/v1/tasks/${taskId}`, {
    method: "DELETE",
  });

  if (!res.ok) {
    const errorText = await res.text();
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", errorText);
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏");
  }

  // –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å res.json() –ø–æ—Å–ª–µ 204
  return true;
};

export const updateTaskStatus = async (taskId: number, data: { status: string }) => {
  const res = await fetch(`http://localhost:8080/api/v1/tasks/updateStatus/${taskId}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  if (!res.ok) {
    const errorText = await res.text();
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", errorText);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å");
  }

  return await res.json();
};
